exec runme ls
cmp stdout golden-list.txt
! stderr .

exec runme ls --allow-unknown=false
cmp stdout golden-list-disallow-unknown.txt
! stderr .

! exec runme ls --filename nonexistent.md
stderr 'failed to open markdown file .*/nonexistent.md: no such file or directory'
! stdout .

env SHELL=/bin/bash
exec runme run echo
stdout 'Hello, runme!'
! stderr .

env SHELL=/bin/bash
exec runme run --index 0
stdout 'Hello, runme!'
! stderr .

env SHELL=/bin/bash
exec runme run echo-1
stdout '1\n2\n3\n'
! stderr .

env SHELL=/bin/bash
exec runme run tempdir
stdout 'hi!'
! stderr .

! exec runme run --allow-unknown=false hello-world-2
! stdout .
stderr 'unable to find any script named "hello-world-2"'

env HOME=/tmp
exec sh -c 'runme run package-main'
stdout 'Hello from Go, runme!'
! stderr .

exec runme run hello-js
stdout 'Hello, runme, from javascript!'
! stderr .

exec runme run hello-js-cat
stdout 'console\.log\(\"Hello, runme, from javascript!\"\)'
! stderr .

-- README.md --
# Examples

## Shell

This is a basic snippet with shell command:

```sh
$ echo "Hello, runme!"
```

You can omit the language, and `runme` will assume you are in shell:

```
$ echo "Hello, runme!"
```

Names will automatically be inferred from a script's contents:

```sh
# This is a pesky comment
echo Inferred
```

With `{name=hello}` you can annotate it and give it a nice name:

```sh {name=echo}
$ echo "Hello, runme!"
```

It can contain multiple lines too:

```sh { interactive=false }
$ echo "1"
$ echo "2"
$ echo "3"
```

Also, the dollar sign is not needed:

```sh
echo "Hello, runme! Again!"
```

It can even run scripting languages:

```js { name=hello-js }
console.log("Hello, runme, from javascript!")
```

And it can even run a cell with a custom program:

```js { name=hello-js-cat program=cat }
console.log("Hello, runme, from javascript!")
```

It works with `cd`, `pushd`, and similar because all lines are executed as a single script:

```sh
temp_dir=$(mktemp -d -t "runme-XXXXXXX")
pushd $temp_dir
echo "hi!" > hi.txt
pwd
cat hi.txt
popd
pwd
```

## Go

It can also execute a snippet of Go code:

```go
package main

import (
    "fmt"
)

func main() {
    fmt.Println("Hello from Go, runme!")
}
```

-- golden-list.txt --
NAME	FILE	FIRST COMMAND	DESCRIPTION
echo-hello	README.md	echo "Hello, runme!"	This is a basic snippet with shell command.
echo-hello-2	README.md	echo "Hello, runme!"	You can omit the language, and runme will assume you are in shell.
echo-inferred	README.md	echo Inferred	Names will automatically be inferred from a script's contents.
echo	README.md	echo "Hello, runme!"	With {name=hello} you can annotate it and give it a nice name.
echo-1	README.md	echo "1"	It can contain multiple lines too.
echo-hello-3	README.md	echo "Hello, runme! Again!"	Also, the dollar sign is not needed.
hello-js	README.md	console.log("Hello, runme, from javascript!")	It can even run scripting languages.
hello-js-cat	README.md	console.log("Hello, runme, from javascript!")	And it can even run a cell with a custom program.
tempdir	README.md	temp_dir=$(mktemp -d -t "runme-XXXXXXX")	It works with cd, pushd, and similar because all lines are executed as a single script.
package-main	README.md	package main	It can also execute a snippet of Go code.
-- golden-list-disallow-unknown.txt --
NAME	FILE	FIRST COMMAND	DESCRIPTION
echo-hello	README.md	echo "Hello, runme!"	This is a basic snippet with shell command.
echo-inferred	README.md	echo Inferred	Names will automatically be inferred from a script's contents.
echo	README.md	echo "Hello, runme!"	With {name=hello} you can annotate it and give it a nice name.
echo-1	README.md	echo "1"	It can contain multiple lines too.
echo-hello-3	README.md	echo "Hello, runme! Again!"	Also, the dollar sign is not needed.
tempdir	README.md	temp_dir=$(mktemp -d -t "runme-XXXXXXX")	It works with cd, pushd, and similar because all lines are executed as a single script.
package-main	README.md	package main	It can also execute a snippet of Go code.
